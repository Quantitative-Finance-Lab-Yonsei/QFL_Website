{"ast":null,"code":"var _jsxFileName = \"/Users/gangminlee/Projects/QFL/csv_dashboard/frontend/src/pages/SP500Return.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend } from 'chart.js';\nimport { CircularProgress, Box, Typography, Container } from '@mui/material';\nimport { API_URL } from '../config.ts';\n\n// Register ChartJS components\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);\n// Normalization function\nconst normalizeData = data => {\n  const min = Math.min(...data);\n  const max = Math.max(...data);\n  return data.map(value => (value - min) / (max - min));\n};\nconst SP500Return = () => {\n  _s();\n  const [data, setData] = useState([]);\n  const [lpplData, setLpplData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        setLoading(true);\n        setError(null);\n\n        // Fetch S&P 500 data\n        const sp500Response = await fetch(`${API_URL}/api/v1/stock-data/symbol/^GSPC`);\n        if (!sp500Response.ok) {\n          throw new Error('Failed to fetch S&P 500 data');\n        }\n        const sp500Data = await sp500Response.json();\n        setData(sp500Data);\n\n        // Fetch LPPL AI data\n        const lpplResponse = await fetch(`${API_URL}/api/v1/lppl-ai-data/`);\n        if (!lpplResponse.ok) {\n          throw new Error('Failed to fetch LPPL AI data');\n        }\n        const lpplAiData = await lpplResponse.json();\n        setLpplData(lpplAiData);\n      } catch (err) {\n        setError(err instanceof Error ? err.message : 'Failed to load data. Please try again later.');\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchData();\n  }, []);\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(Box, {\n      display: \"flex\",\n      justifyContent: \"center\",\n      alignItems: \"center\",\n      minHeight: \"400px\",\n      children: /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(Box, {\n      display: \"flex\",\n      justifyContent: \"center\",\n      alignItems: \"center\",\n      minHeight: \"400px\",\n      children: /*#__PURE__*/_jsxDEV(Typography, {\n        color: \"error\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this);\n  }\n\n  // Normalize the data\n  const normalizedSP500 = normalizeData(data.map(item => item.close_price));\n  const normalizedLPPL = normalizeData(lpplData.map(item => item.dtcai));\n  const chartData = {\n    labels: data.map(item => item.date),\n    datasets: [{\n      label: 'S&P 500 (Normalized)',\n      data: normalizedSP500,\n      borderColor: 'rgb(75, 192, 192)',\n      backgroundColor: 'rgba(75, 192, 192, 0.1)',\n      tension: 0.1,\n      fill: true\n    }, {\n      label: 'LPPL AI DTC (Normalized)',\n      data: normalizedLPPL,\n      borderColor: 'rgb(255, 99, 132)',\n      backgroundColor: 'rgba(255, 99, 132, 0.1)',\n      tension: 0.1,\n      fill: true\n    }]\n  };\n  const options = {\n    responsive: true,\n    plugins: {\n      legend: {\n        position: 'top'\n      },\n      title: {\n        display: true,\n        text: 'Normalized S&P 500 and LPPL AI DTC Comparison'\n      },\n      tooltip: {\n        callbacks: {\n          label: function (context) {\n            const label = context.dataset.label || '';\n            const value = context.parsed.y;\n            return `${label}: ${value.toFixed(4)}`;\n          }\n        }\n      }\n    },\n    scales: {\n      y: {\n        beginAtZero: true,\n        max: 1,\n        title: {\n          display: true,\n          text: 'Normalized Value'\n        }\n      },\n      x: {\n        title: {\n          display: true,\n          text: 'Date'\n        }\n      }\n    },\n    interaction: {\n      intersect: false,\n      mode: 'index'\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    maxWidth: \"lg\",\n    children: /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        mt: 4,\n        mb: 4\n      },\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h4\",\n        component: \"h1\",\n        gutterBottom: true,\n        children: \"S&P 500 and LPPL AI Analysis\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          height: '600px',\n          position: 'relative'\n        },\n        children: /*#__PURE__*/_jsxDEV(Line, {\n          data: chartData,\n          options: options\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 169,\n    columnNumber: 5\n  }, this);\n};\n_s(SP500Return, \"IGCjgknPUePV+F301SWRDnz3Y3w=\");\n_c = SP500Return;\nexport default SP500Return;\nvar _c;\n$RefreshReg$(_c, \"SP500Return\");","map":{"version":3,"names":["React","useState","useEffect","Line","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","CircularProgress","Box","Typography","Container","API_URL","jsxDEV","_jsxDEV","register","normalizeData","data","min","Math","max","map","value","SP500Return","_s","setData","lpplData","setLpplData","loading","setLoading","error","setError","fetchData","sp500Response","fetch","ok","Error","sp500Data","json","lpplResponse","lpplAiData","err","message","display","justifyContent","alignItems","minHeight","children","fileName","_jsxFileName","lineNumber","columnNumber","color","normalizedSP500","item","close_price","normalizedLPPL","dtcai","chartData","labels","date","datasets","label","borderColor","backgroundColor","tension","fill","options","responsive","plugins","legend","position","title","text","tooltip","callbacks","context","dataset","parsed","y","toFixed","scales","beginAtZero","x","interaction","intersect","mode","maxWidth","sx","mt","mb","variant","component","gutterBottom","height","_c","$RefreshReg$"],"sources":["/Users/gangminlee/Projects/QFL/csv_dashboard/frontend/src/pages/SP500Return.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend,\n} from 'chart.js';\nimport { CircularProgress, Box, Typography, Container } from '@mui/material';\nimport { API_URL } from '../config.ts';\n\n// Register ChartJS components\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend\n);\n\ninterface StockData {\n  date: string;\n  close_price: number;\n}\n\ninterface LPPLAIData {\n  date: string;\n  close_price: number;\n  dtcai: number;\n  color: string;\n}\n\n// Normalization function\nconst normalizeData = (data: number[]): number[] => {\n  const min = Math.min(...data);\n  const max = Math.max(...data);\n  return data.map(value => (value - min) / (max - min));\n};\n\nconst SP500Return: React.FC = () => {\n  const [data, setData] = useState<StockData[]>([]);\n  const [lpplData, setLpplData] = useState<LPPLAIData[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        setLoading(true);\n        setError(null);\n\n        // Fetch S&P 500 data\n        const sp500Response = await fetch(`${API_URL}/api/v1/stock-data/symbol/^GSPC`);\n        if (!sp500Response.ok) {\n          throw new Error('Failed to fetch S&P 500 data');\n        }\n        const sp500Data = await sp500Response.json();\n        setData(sp500Data);\n\n        // Fetch LPPL AI data\n        const lpplResponse = await fetch(`${API_URL}/api/v1/lppl-ai-data/`);\n        if (!lpplResponse.ok) {\n          throw new Error('Failed to fetch LPPL AI data');\n        }\n        const lpplAiData = await lpplResponse.json();\n        setLpplData(lpplAiData);\n\n      } catch (err) {\n        setError(err instanceof Error ? err.message : 'Failed to load data. Please try again later.');\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchData();\n  }, []);\n\n  if (loading) {\n    return (\n      <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" minHeight=\"400px\">\n        <CircularProgress />\n      </Box>\n    );\n  }\n\n  if (error) {\n    return (\n      <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" minHeight=\"400px\">\n        <Typography color=\"error\">{error}</Typography>\n      </Box>\n    );\n  }\n\n  // Normalize the data\n  const normalizedSP500 = normalizeData(data.map(item => item.close_price));\n  const normalizedLPPL = normalizeData(lpplData.map(item => item.dtcai));\n\n  const chartData = {\n    labels: data.map(item => item.date),\n    datasets: [\n      {\n        label: 'S&P 500 (Normalized)',\n        data: normalizedSP500,\n        borderColor: 'rgb(75, 192, 192)',\n        backgroundColor: 'rgba(75, 192, 192, 0.1)',\n        tension: 0.1,\n        fill: true,\n      },\n      {\n        label: 'LPPL AI DTC (Normalized)',\n        data: normalizedLPPL,\n        borderColor: 'rgb(255, 99, 132)',\n        backgroundColor: 'rgba(255, 99, 132, 0.1)',\n        tension: 0.1,\n        fill: true,\n      }\n    ],\n  };\n\n  const options = {\n    responsive: true,\n    plugins: {\n      legend: {\n        position: 'top' as const,\n      },\n      title: {\n        display: true,\n        text: 'Normalized S&P 500 and LPPL AI DTC Comparison',\n      },\n      tooltip: {\n        callbacks: {\n          label: function(context: any) {\n            const label = context.dataset.label || '';\n            const value = context.parsed.y;\n            return `${label}: ${value.toFixed(4)}`;\n          }\n        }\n      }\n    },\n    scales: {\n      y: {\n        beginAtZero: true,\n        max: 1,\n        title: {\n          display: true,\n          text: 'Normalized Value'\n        }\n      },\n      x: {\n        title: {\n          display: true,\n          text: 'Date'\n        }\n      }\n    },\n    interaction: {\n      intersect: false,\n      mode: 'index' as const,\n    },\n  };\n\n  return (\n    <Container maxWidth=\"lg\">\n      <Box sx={{ mt: 4, mb: 4 }}>\n        <Typography variant=\"h4\" component=\"h1\" gutterBottom>\n          S&P 500 and LPPL AI Analysis\n        </Typography>\n        <Box sx={{ height: '600px', position: 'relative' }}>\n          <Line data={chartData} options={options} />\n        </Box>\n      </Box>\n    </Container>\n  );\n};\n\nexport default SP500Return; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"/Users/gangminlee/Projects/QFL/csv_dashboard/frontend/src/pages/SP500Return.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend } from 'chart.js';\nimport { CircularProgress, Box, Typography, Container, Grid, Card, CardContent, Button } from '@mui/material';\nimport { API_URL } from '../config.ts';\n\n// Register ChartJS components\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);\nconst SP500Return = () => {\n  _s();\n  const [assetsData, setAssetsData] = useState([]);\n  const [lpplData, setLpplData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [selectedAsset, setSelectedAsset] = useState(null);\n  const assets = [{\n    symbol: '^GSPC',\n    name: 'S&P 500'\n  }, {\n    symbol: 'GC=F',\n    name: 'Gold'\n  }, {\n    symbol: '^TNX',\n    name: 'Interest Rate'\n  }, {\n    symbol: 'BTC-USD',\n    name: 'Bitcoin'\n  }];\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        setLoading(true);\n        setError(null);\n\n        // Fetch all assets data\n        const assetsDataPromises = assets.map(async asset => {\n          const response = await fetch(`${API_URL}/api/v1/stock-data/symbol/${asset.symbol}`);\n          if (!response.ok) {\n            throw new Error(`Failed to fetch ${asset.name} data`);\n          }\n          const data = await response.json();\n          return {\n            ...asset,\n            data\n          };\n        });\n        const assetsData = await Promise.all(assetsDataPromises);\n        setAssetsData(assetsData);\n\n        // Fetch LPPL AI data\n        const lpplResponse = await fetch(`${API_URL}/api/v1/lppl-ai-data/`);\n        if (!lpplResponse.ok) {\n          throw new Error('Failed to fetch LPPL AI data');\n        }\n        const lpplAiData = await lpplResponse.json();\n        setLpplData(lpplAiData);\n      } catch (err) {\n        setError(err instanceof Error ? err.message : 'Failed to load data. Please try again later.');\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchData();\n  }, []);\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(Box, {\n      display: \"flex\",\n      justifyContent: \"center\",\n      alignItems: \"center\",\n      minHeight: \"400px\",\n      children: /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(Box, {\n      display: \"flex\",\n      justifyContent: \"center\",\n      alignItems: \"center\",\n      minHeight: \"400px\",\n      children: /*#__PURE__*/_jsxDEV(Typography, {\n        color: \"error\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this);\n  }\n  const selectedAssetData = selectedAsset ? assetsData.find(asset => asset.symbol === selectedAsset) : null;\n  const getLastFiveYearsData = data => {\n    // Sort data first to ensure we have the full range\n    const sortedData = [...data].sort((a, b) => new Date(a.date).getTime() - new Date(b.date).getTime());\n\n    // Find the index of May 2020\n    const startIndex = sortedData.findIndex(item => {\n      const date = new Date(item.date);\n      return date.getFullYear() >= 2020 && date.getMonth() >= 4; // May is month 4 (0-based)\n    });\n\n    // Find the index of May 2025\n    const endIndex = sortedData.findIndex(item => {\n      const date = new Date(item.date);\n      return date.getFullYear() >= 2025 && date.getMonth() >= 4;\n    });\n\n    // If we can't find the exact dates, use the closest available dates\n    const startIdx = startIndex === -1 ? 0 : startIndex;\n    const endIdx = endIndex === -1 ? sortedData.length - 1 : endIndex;\n    return sortedData.slice(startIdx, endIdx + 1);\n  };\n  const formatDate = dateString => {\n    const date = new Date(dateString);\n    return date.toLocaleDateString('en-US', {\n      year: 'numeric',\n      month: 'short'\n    });\n  };\n  const chartData = selectedAssetData ? {\n    labels: getLastFiveYearsData(selectedAssetData.data).map(item => formatDate(item.date)),\n    datasets: [{\n      label: `${selectedAssetData.name}`,\n      data: getLastFiveYearsData(selectedAssetData.data).map(item => item.close_price),\n      borderColor: 'rgb(75, 192, 192)',\n      backgroundColor: 'rgba(75, 192, 192, 0.1)',\n      tension: 0.1,\n      fill: true,\n      yAxisID: 'y'\n    }, ...(selectedAsset === '^GSPC' ? [{\n      label: 'LPPL DTCAI',\n      data: getLastFiveYearsData(lpplData).map(item => item.dtcai),\n      borderColor: 'rgb(255, 99, 132)',\n      backgroundColor: 'rgba(255, 99, 132, 0.1)',\n      tension: 0.1,\n      fill: true,\n      yAxisID: 'y1'\n    }] : [])]\n  } : null;\n  const options = {\n    responsive: true,\n    plugins: {\n      legend: {\n        position: 'top'\n      },\n      title: {\n        display: true,\n        text: selectedAssetData ? selectedAsset === '^GSPC' ? `${selectedAssetData.name} and LPPL DTCAI Comparison (May 2020 - May 2025)` : `${selectedAssetData.name} (May 2020 - May 2025)` : ''\n      },\n      tooltip: {\n        callbacks: {\n          label: function (context) {\n            const label = context.dataset.label || '';\n            const value = context.parsed.y;\n            return `${label}: ${value.toFixed(2)}`;\n          }\n        }\n      }\n    },\n    scales: {\n      y: {\n        type: 'linear',\n        display: true,\n        position: 'left',\n        title: {\n          display: true,\n          text: 'S&P 500 Value'\n        },\n        grid: {\n          drawOnChartArea: true\n        }\n      },\n      y1: {\n        type: 'linear',\n        display: true,\n        position: 'right',\n        title: {\n          display: true,\n          text: 'DTCAI Value'\n        },\n        grid: {\n          drawOnChartArea: false\n        }\n      },\n      x: {\n        title: {\n          display: true,\n          text: 'Date'\n        },\n        ticks: {\n          maxRotation: 45,\n          minRotation: 45,\n          autoSkip: true,\n          maxTicksLimit: 20,\n          callback: function (value, index, values) {\n            const date = new Date(this.getLabelForValue(value));\n            // Show year for January of each year\n            if (date.getMonth() === 0) {\n              return date.toLocaleDateString('en-US', {\n                year: 'numeric'\n              });\n            }\n            // Show month for every 3 months\n            if (date.getMonth() % 3 === 0) {\n              return date.toLocaleDateString('en-US', {\n                month: 'short'\n              });\n            }\n            return '';\n          }\n        }\n      }\n    },\n    interaction: {\n      intersect: false,\n      mode: 'index'\n    }\n  };\n  if (selectedAsset && chartData) {\n    return /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        position: 'fixed',\n        top: 0,\n        left: 0,\n        right: 0,\n        bottom: 0,\n        bgcolor: 'background.paper',\n        zIndex: 1000,\n        p: 3\n      },\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        onClick: () => setSelectedAsset(null),\n        sx: {\n          mb: 2\n        },\n        children: \"Back to Assets\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 261,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          height: 'calc(100vh - 100px)'\n        },\n        children: /*#__PURE__*/_jsxDEV(Line, {\n          data: chartData,\n          options: options\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 269,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 268,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 251,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(Container, {\n    maxWidth: \"lg\",\n    children: /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        mt: 4,\n        mb: 4\n      },\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h4\",\n        component: \"h1\",\n        gutterBottom: true,\n        children: \"LPPL AI Analysis\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 278,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        component: \"img\",\n        src: \"/yonsei_univ_photo.png\",\n        alt: \"Yonsei University\",\n        sx: {\n          width: '100%',\n          maxWidth: '1200px',\n          height: 'auto',\n          mb: 4,\n          display: 'block',\n          mx: 'auto'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 281,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        spacing: 2,\n        sx: {\n          mb: 4\n        },\n        children: assets.map(asset => /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 6,\n          sm: 3,\n          children: /*#__PURE__*/_jsxDEV(Card, {\n            sx: {\n              cursor: 'pointer',\n              bgcolor: selectedAsset === asset.symbol ? 'primary.light' : 'background.paper',\n              border: '2px solid #1976d2',\n              '&:hover': {\n                bgcolor: 'primary.light',\n                opacity: 0.8\n              }\n            },\n            onClick: () => setSelectedAsset(asset.symbol),\n            children: /*#__PURE__*/_jsxDEV(CardContent, {\n              children: /*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"h6\",\n                align: \"center\",\n                children: asset.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 310,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 309,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 297,\n            columnNumber: 15\n          }, this)\n        }, asset.symbol, false, {\n          fileName: _jsxFileName,\n          lineNumber: 296,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 294,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 277,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 276,\n    columnNumber: 5\n  }, this);\n};\n_s(SP500Return, \"hVuDUOnc9oXh9WEhepcm2EPqCb4=\");\n_c = SP500Return;\nexport default SP500Return;\nvar _c;\n$RefreshReg$(_c, \"SP500Return\");","map":{"version":3,"names":["React","useState","useEffect","Line","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","CircularProgress","Box","Typography","Container","Grid","Card","CardContent","Button","API_URL","jsxDEV","_jsxDEV","register","SP500Return","_s","assetsData","setAssetsData","lpplData","setLpplData","loading","setLoading","error","setError","selectedAsset","setSelectedAsset","assets","symbol","name","fetchData","assetsDataPromises","map","asset","response","fetch","ok","Error","data","json","Promise","all","lpplResponse","lpplAiData","err","message","display","justifyContent","alignItems","minHeight","children","fileName","_jsxFileName","lineNumber","columnNumber","color","selectedAssetData","find","getLastFiveYearsData","sortedData","sort","a","b","Date","date","getTime","startIndex","findIndex","item","getFullYear","getMonth","endIndex","startIdx","endIdx","length","slice","formatDate","dateString","toLocaleDateString","year","month","chartData","labels","datasets","label","close_price","borderColor","backgroundColor","tension","fill","yAxisID","dtcai","options","responsive","plugins","legend","position","title","text","tooltip","callbacks","context","dataset","value","parsed","y","toFixed","scales","type","grid","drawOnChartArea","y1","x","ticks","maxRotation","minRotation","autoSkip","maxTicksLimit","callback","index","values","getLabelForValue","interaction","intersect","mode","sx","top","left","right","bottom","bgcolor","zIndex","p","variant","onClick","mb","height","maxWidth","mt","component","gutterBottom","src","alt","width","mx","container","spacing","xs","sm","cursor","border","opacity","align","_c","$RefreshReg$"],"sources":["/Users/gangminlee/Projects/QFL/csv_dashboard/frontend/src/pages/SP500Return.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend,\n} from 'chart.js';\nimport { CircularProgress, Box, Typography, Container, Grid, Card, CardContent, Button } from '@mui/material';\nimport { API_URL } from '../config.ts';\n\n// Register ChartJS components\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend\n);\n\ninterface StockData {\n  date: string;\n  close_price: number;\n}\n\ninterface LPPLAIData {\n  date: string;\n  close_price: number;\n  dtcai: number;\n  color: string;\n}\n\ninterface AssetData {\n  symbol: string;\n  name: string;\n  data: StockData[];\n}\n\nconst SP500Return: React.FC = () => {\n  const [assetsData, setAssetsData] = useState<AssetData[]>([]);\n  const [lpplData, setLpplData] = useState<LPPLAIData[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [selectedAsset, setSelectedAsset] = useState<string | null>(null);\n\n  const assets = [\n    { symbol: '^GSPC', name: 'S&P 500' },\n    { symbol: 'GC=F', name: 'Gold' },\n    { symbol: '^TNX', name: 'Interest Rate' },\n    { symbol: 'BTC-USD', name: 'Bitcoin' }\n  ];\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        setLoading(true);\n        setError(null);\n\n        // Fetch all assets data\n        const assetsDataPromises = assets.map(async (asset) => {\n          const response = await fetch(`${API_URL}/api/v1/stock-data/symbol/${asset.symbol}`);\n          if (!response.ok) {\n            throw new Error(`Failed to fetch ${asset.name} data`);\n          }\n          const data = await response.json();\n          return { ...asset, data };\n        });\n\n        const assetsData = await Promise.all(assetsDataPromises);\n        setAssetsData(assetsData);\n\n        // Fetch LPPL AI data\n        const lpplResponse = await fetch(`${API_URL}/api/v1/lppl-ai-data/`);\n        if (!lpplResponse.ok) {\n          throw new Error('Failed to fetch LPPL AI data');\n        }\n        const lpplAiData = await lpplResponse.json();\n        setLpplData(lpplAiData);\n\n      } catch (err) {\n        setError(err instanceof Error ? err.message : 'Failed to load data. Please try again later.');\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchData();\n  }, []);\n\n  if (loading) {\n    return (\n      <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" minHeight=\"400px\">\n        <CircularProgress />\n      </Box>\n    );\n  }\n\n  if (error) {\n    return (\n      <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" minHeight=\"400px\">\n        <Typography color=\"error\">{error}</Typography>\n      </Box>\n    );\n  }\n\n  const selectedAssetData = selectedAsset ? assetsData.find(asset => asset.symbol === selectedAsset) : null;\n\n  const getLastFiveYearsData = (data: StockData[] | LPPLAIData[]) => {\n    // Sort data first to ensure we have the full range\n    const sortedData = [...data].sort((a, b) => new Date(a.date).getTime() - new Date(b.date).getTime());\n    \n    // Find the index of May 2020\n    const startIndex = sortedData.findIndex(item => {\n      const date = new Date(item.date);\n      return date.getFullYear() >= 2020 && date.getMonth() >= 4; // May is month 4 (0-based)\n    });\n    \n    // Find the index of May 2025\n    const endIndex = sortedData.findIndex(item => {\n      const date = new Date(item.date);\n      return date.getFullYear() >= 2025 && date.getMonth() >= 4;\n    });\n\n    // If we can't find the exact dates, use the closest available dates\n    const startIdx = startIndex === -1 ? 0 : startIndex;\n    const endIdx = endIndex === -1 ? sortedData.length - 1 : endIndex;\n\n    return sortedData.slice(startIdx, endIdx + 1);\n  };\n\n  const formatDate = (dateString: string) => {\n    const date = new Date(dateString);\n    return date.toLocaleDateString('en-US', { year: 'numeric', month: 'short' });\n  };\n\n  const chartData = selectedAssetData ? {\n    labels: getLastFiveYearsData(selectedAssetData.data)\n      .map(item => formatDate(item.date)),\n    datasets: [\n      {\n        label: `${selectedAssetData.name}`,\n        data: getLastFiveYearsData(selectedAssetData.data)\n          .map(item => item.close_price),\n        borderColor: 'rgb(75, 192, 192)',\n        backgroundColor: 'rgba(75, 192, 192, 0.1)',\n        tension: 0.1,\n        fill: true,\n        yAxisID: 'y',\n      },\n      ...(selectedAsset === '^GSPC' ? [{\n        label: 'LPPL DTCAI',\n        data: getLastFiveYearsData(lpplData)\n          .map(item => (item as LPPLAIData).dtcai),\n        borderColor: 'rgb(255, 99, 132)',\n        backgroundColor: 'rgba(255, 99, 132, 0.1)',\n        tension: 0.1,\n        fill: true,\n        yAxisID: 'y1',\n      }] : [])\n    ],\n  } : null;\n\n  const options = {\n    responsive: true,\n    plugins: {\n      legend: {\n        position: 'top' as const,\n      },\n      title: {\n        display: true,\n        text: selectedAssetData \n          ? selectedAsset === '^GSPC'\n            ? `${selectedAssetData.name} and LPPL DTCAI Comparison (May 2020 - May 2025)`\n            : `${selectedAssetData.name} (May 2020 - May 2025)`\n          : '',\n      },\n      tooltip: {\n        callbacks: {\n          label: function(context: any) {\n            const label = context.dataset.label || '';\n            const value = context.parsed.y;\n            return `${label}: ${value.toFixed(2)}`;\n          }\n        }\n      }\n    },\n    scales: {\n      y: {\n        type: 'linear' as const,\n        display: true,\n        position: 'left' as const,\n        title: {\n          display: true,\n          text: 'S&P 500 Value'\n        },\n        grid: {\n          drawOnChartArea: true,\n        },\n      },\n      y1: {\n        type: 'linear' as const,\n        display: true,\n        position: 'right' as const,\n        title: {\n          display: true,\n          text: 'DTCAI Value'\n        },\n        grid: {\n          drawOnChartArea: false,\n        },\n      },\n      x: {\n        title: {\n          display: true,\n          text: 'Date'\n        },\n        ticks: {\n          maxRotation: 45,\n          minRotation: 45,\n          autoSkip: true,\n          maxTicksLimit: 20,\n          callback: function(value: any, index: number, values: any[]) {\n            const date = new Date(this.getLabelForValue(value));\n            // Show year for January of each year\n            if (date.getMonth() === 0) {\n              return date.toLocaleDateString('en-US', { year: 'numeric' });\n            }\n            // Show month for every 3 months\n            if (date.getMonth() % 3 === 0) {\n              return date.toLocaleDateString('en-US', { month: 'short' });\n            }\n            return '';\n          }\n        }\n      }\n    },\n    interaction: {\n      intersect: false,\n      mode: 'index' as const,\n    },\n  };\n\n  if (selectedAsset && chartData) {\n    return (\n      <Box sx={{ \n        position: 'fixed',\n        top: 0,\n        left: 0,\n        right: 0,\n        bottom: 0,\n        bgcolor: 'background.paper',\n        zIndex: 1000,\n        p: 3\n      }}>\n        <Button \n          variant=\"contained\" \n          onClick={() => setSelectedAsset(null)}\n          sx={{ mb: 2 }}\n        >\n          Back to Assets\n        </Button>\n        <Box sx={{ height: 'calc(100vh - 100px)' }}>\n          <Line data={chartData} options={options} />\n        </Box>\n      </Box>\n    );\n  }\n\n  return (\n    <Container maxWidth=\"lg\">\n      <Box sx={{ mt: 4, mb: 4 }}>\n        <Typography variant=\"h4\" component=\"h1\" gutterBottom>\n          LPPL AI Analysis\n        </Typography>\n        <Box \n          component=\"img\"\n          src=\"/yonsei_univ_photo.png\"\n          alt=\"Yonsei University\"\n          sx={{\n            width: '100%',\n            maxWidth: '1200px',\n            height: 'auto',\n            mb: 4,\n            display: 'block',\n            mx: 'auto'\n          }}\n        />\n        <Grid container spacing={2} sx={{ mb: 4 }}>\n          {assets.map((asset) => (\n            <Grid item xs={6} sm={3} key={asset.symbol}>\n              <Card \n                sx={{ \n                  cursor: 'pointer',\n                  bgcolor: selectedAsset === asset.symbol ? 'primary.light' : 'background.paper',\n                  border: '2px solid #1976d2',\n                  '&:hover': {\n                    bgcolor: 'primary.light',\n                    opacity: 0.8\n                  }\n                }}\n                onClick={() => setSelectedAsset(asset.symbol)}\n              >\n                <CardContent>\n                  <Typography variant=\"h6\" align=\"center\">\n                    {asset.name}\n                  </Typography>\n                </CardContent>\n              </Card>\n            </Grid>\n          ))}\n        </Grid>\n      </Box>\n    </Container>\n  );\n};\n\nexport default SP500Return; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}